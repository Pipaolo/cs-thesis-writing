# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# NEXT JS THINGS
# dependencies
/course-explorer/node_modules
/course-explorer/.pnp
/course-explorer/.pnp.js

# testing
/course-explorer/coverage

# database
/course-explorer/prisma/db.sqlite
/course-explorer/prisma/db.sqlite-journal

# next.js
/course-explorer/.next/
/course-explorer/out/
/course-explorer/next-env.d.ts

# production
/course-explorer/build

# misc
/course-explorer/.DS_Store
/course-explorer/*.pem

# debug
/course-explorer/npm-debug.log*
/course-explorer/yarn-debug.log*
/course-explorer/yarn-error.log*
/course-explorer/.pnpm-debug.log*

# local env files
# do not commit any .env files to git, except for the .env.example file. https://create.t3.gg/en/usage/env-variables#using-environment-variables
/course-explorer/.env
/course-explorer/.env*.local

# vercel
/course-explorer/.vercel

# typescript
/course-explorer/*.tsbuildinfo
# END OF NEXT JS THINGS

# GOLANG THINGS
# If you prefer the allow list template instead of the deny list, see community template:
# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore
#
# Binaries for programs and plugins
/recommendations-scraper/*.exe
/recommendations-scraper/*.exe~
/recommendations-scraper/*.dll
/recommendations-scraper/*.so
/recommendations-scraper/*.dylib

# Test binary, built with `go test -c`
/recommendations-scraper/*.test

# Output of the go coverage tool, specifically when used with LiteIDE
/recommendations-scraper/*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
/recommendations-scraper/go.work
# END OF GOLANG THINGS


# PYTHON THINGS
# Byte-compiled / optimized / DLL files
/course-platform/__pycache__/
/course-platform/*.py[cod]
/course-platform/*$py.class

# C extensions
/course-platform/*.so

# Distribution / packaging
/course-platform/.Python
/course-platform/build/
/course-platform/develop-eggs/
/course-platform/dist/
/course-platform/downloads/
/course-platform/eggs/
/course-platform/.eggs/
/course-platform/lib/
/course-platform/lib64/
/course-platform/parts/
/course-platform/sdist/
/course-platform/var/
/course-platform/wheels/
/course-platform/share/python-wheels/
/course-platform/*.egg-info/
/course-platform/.installed.cfg
/course-platform/*.egg
/course-platform/MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
/course-platform/*.manifest
/course-platform/*.spec

# Installer logs
/course-platform/pip-log.txt
/course-platform/pip-delete-this-directory.txt

# Unit test / coverage reports
/course-platform/htmlcov/
/course-platform/.tox/
/course-platform/.nox/
/course-platform/.coverage
/course-platform/.coverage.*
/course-platform/.cache
/course-platform/nosetests.xml
/course-platform/coverage.xml
/course-platform/*.cover
/course-platform/*.py,cover
/course-platform/.hypothesis/
/course-platform/.pytest_cache/
/course-platform/cover/

# Translations
/course-platform/*.mo
/course-platform/*.pot

# Django stuff:
/course-platform/*.log
/course-platform/local_settings.py
/course-platform/db.sqlite3
/course-platform/db.sqlite3-journal

# Flask stuff:
/course-platform/instance/
/course-platform/.webassets-cache

# Scrapy stuff:
/course-platform/.scrapy

# Sphinx documentation
/course-platform/docs/_build/

# PyBuilder
/course-platform/.pybuilder/
/course-platform/target/

# Jupyter Notebook
/course-platform/.ipynb_checkpoints

# IPython
/course-platform/profile_default/
/course-platform/ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
/course-platform/.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
/course-platform/__pypackages__/

# Celery stuff
/course-platform/celerybeat-schedule
/course-platform/celerybeat.pid

# SageMath parsed files
/course-platform/*.sage.py

# Environments
/course-platform/.env
/course-platform/.venv
/course-platform/env/
/course-platform/venv/
/course-platform/ENV/
/course-platform/env.bak/
/course-platform/venv.bak/

# Spyder project settings
/course-platform/.spyderproject
/course-platform/.spyproject

# Rope project settings
/course-platform/.ropeproject

# mkdocs documentation
/course-platform/site

# mypy
/course-platform/.mypy_cache/
/course-platform/.dmypy.json
/course-platform/dmypy.json

# Pyre type checker
/course-platform/.pyre/

# pytype static type analyzer
/course-platform/.pytype/

# Cython debug symbols
/course-platform/cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
# END OF PYTHON THINGS